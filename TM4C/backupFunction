//电线巡迹
void UserTask_FollowLineN(u8 wholeLength){
		static u16 counter = 0;
		u16 maxcnt = 50000; 
		static u8 count1 = 0;
		static u8 stage = 0;			//流程执行阶段
		u8 distance = 20;				  //每次移动的距离
		u8 velocity = 10;	        //移动速度 最小10cm/s
		u8 targetHeight = 100;
		LX_Change_Mode(3);
		
		//切换状态时清除局部变量
		if(hmi.mode != hmi.oldmode){
			counter = 0;
			stage = 0;
			count1 = 0;	
			hmi.oldmode = hmi.mode;
		}
		//非阻塞延迟 一次20ms
		if(delay_flag){
			delay20();
		}
		else{
			if(stage == 0){
				FC_Unlock();
				stage = 1;
				//起飞前等待
				maxcount = 200;
				delay_flag = 1;
			}
			else if(stage == 1){
				OneKey_Takeoff(targetHeight);
				stage = 2;
				maxcount = 100;
				delay_flag = 1;
			}
			else if(stage == 2){
				//前后位置
				Horizontal_Move(k210.yoffset,velocity,k210.ydirection*180);			
				maxcount = distance * 50 / velocity;
				delay_flag = 1;
				stage = 3;
			}
			else if(stage == 3){
				//左右位置
				Horizontal_Move(k210.xoffset,velocity,k210.xdirection*180 + 90);			
				maxcount = distance * 50 / velocity;
				delay_flag = 1;
				stage = 2;
				counter ++;
			}
			else if(stage == 4){
				//前进
				Horizontal_Move(distance,velocity,90);			
				maxcount = distance * 50 / velocity;
				delay_flag = 1;
				stage = 5;
				//if(k210.barcode == 1) stage = 6; //识别到二维码			
			}
			else if(stage==5){	//根据电线调整飞机高度
				//YAW方向调整
				Rotate(k210.leftorright,k210.angel);
				stage = 4;
			}

		//超时降落
		if(counter >= maxcnt){
			OneKey_Land();
			counter = 0;
			stage = 0;
			hmi.mode = 0;
		}
	}
}



/*/地面线循迹
void UserTask_FollowLine(u8 wholeLength){
		static u16 counter = 0;
		static u8 count1 = 0;
		static u8 stage = 0;			//流程执行阶段
		u8 distance = 2;					//每次移动的距离
		u8 velocity = 15;					//移动速度 最小10cm/s
		u8 targetHeight = 100;
		u16 maxcnt = 50000; 
		LX_Change_Mode(3);
		
		//切换状态时清除局部变量
		if(hmi.mode != hmi.oldmode){
			counter = 0;
			stage = 0;
			count1 = 0;	
			hmi.oldmode = hmi.mode;
		}
		//非阻塞延迟 一次20ms
		if(delay_flag){
			delay20();
		}
		else{
			if(stage == 0){
				FC_Unlock();
				count1++;
			if(count1>=150){
				stage = 1;
				count1=0;
			}
		}
		else if(stage == 1){
			OneKey_Takeoff(targetHeight);
			stage = 2;
		}
		else if(stage == 2){
			//高度调节
			if(ano_of.of_alt_cm>targetHeight + 3) Vertical_Down(ano_of.of_alt_cm-targetHeight,10);
			else if(ano_of.of_alt_cm<targetHeight - 3) Vertical_Up(targetHeight-ano_of.of_alt_cm,10);
			else{	
				//拐弯角度调整
				if(k210.angel >180 && k210.angel<357)Left_Rotate(360-k210.angel,30);
				else if(k210.angel<180 && k210.angel>3) Right_Rotate(k210.angel,30); 
				//左右位置调整
				if(k210.offset/2 > 3)	Horizontal_Move(k210.offset/2,velocity,k210.leftorright*180+90);
				else counter++;
				//前进
				Horizontal_Move(distance,velocity,0);
				//识别指定数字降落
				if(k210.number == 3) stage = 3;
			}
		}
		else if(stage==3){
			OneKey_Land();
			counter = 0;
			stage = 0;
			hmi.mode = 0;
		}
		if(counter >= maxcnt){
			stage=3;
		}
	}
}
*/

//原地自转
void rotate(u16 r,u8 direction){
		static u16 counter = 0;
		static u8 stage = 1;				//流程执行阶段
		u8 deg = 20;								//单次旋转角度
		u8 degs = 10;								//旋转角速度 不应大于deg
		u8 distance = 2*0.1736*r;		//单次移动距离 决定周长
		u8 velocity = distance;			//单次移动速度
	
		//非阻塞延迟 一次20ms
		if(delay_flag){
			delay20();
		}
		else{
			if(stage==1){
				if(direction == 0)Left_Rotate(deg,degs);
				else Right_Rotate(deg,degs);
				maxcount = deg * 50 /degs;
				delay_flag = 1;
				stage = 2;
			}
			else if(stage==2){
				if(direction == 0) Horizontal_Move(distance,velocity,90);
				else Horizontal_Move(distance,velocity,270);
				maxcount = distance * 50 / velocity;
				delay_flag = 1;
				//stage = 3;
				stage = 1;
			}
			else if(stage==3){
				if(k210.distance<100 && k210.distance>70)Horizontal_Move(k210.distance - 70,10,180);
				maxcount = 50;
				delay_flag = 1;
				stage = 1;
			}
	}
}